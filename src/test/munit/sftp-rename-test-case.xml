<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
      xmlns:java="http://www.mulesoft.org/schema/mule/java" xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
        http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

    <munit:config name="sftp-rename-test-case.xml"/>



    <munit:before-suite name="before-sftp-rename-test-case">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="startSftpServer(String)">
            <java:args>
                #[{
                arg0: ${sftp.server.port},
                }]
            </java:args>
        </java:invoke-static>
    </munit:before-suite>

    <munit:after-suite name="after-sftp-rename-test-case">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="stopSftpServer()">
            <java:args>
                #[{}]
            </java:args>
        </java:invoke-static>
    </munit:after-suite>

    <munit:after-test name="after-test-sftp-rename-test-case">
        <try>
            <sftp:delete config-ref="config" path="source"/>
            <error-handler >
                <on-error-continue type="SFTP:ILLEGAL_PATH"/>
            </error-handler>
        </try>
    </munit:after-test>

    <munit:test name="sftp-rename-directory-success"
                description="A directory is created to be renamed, it is expected that listing will only return the renamed directory">
        <munit:behavior>
            <sftp:create-directory config-ref="config" directoryPath="source/created-to-rename"/>
        </munit:behavior>
        <munit:execution>
            <sftp:rename config-ref="config" path="source/created-to-rename" to="file-renamed"/>
        </munit:execution>
        <munit:validation >
            <sftp:list config-ref="config" directoryPath="source"/>
            <munit-tools:assert-that  expression="#[sizeOf(payload)]" is="#[MunitTools::equalTo(1)]"/>
            <munit-tools:assert-that expression="#[payload[0].attributes.fileName]" is="#[MunitTools::equalTo('file-renamed')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-rename-directory-exists" description="An attempt is made to rename a file but the name already exists in the target."
                expectedErrorType="SFTP:FILE_ALREADY_EXISTS">
        <munit:behavior>
            <sftp:create-directory config-ref="config" directoryPath="source/created-to-rename"/>
            <sftp:create-directory config-ref="config" directoryPath="source/file-renamed"/>
        </munit:behavior>
        <munit:execution>
            <sftp:rename config-ref="config" path="source/created-to-rename" to="file-renamed"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-rename-directory-already-exists-with-overwrite-enable"
                description="A file with an existing name is renamed, with overwriting enabled, the source path is renamed and the existing one is lost.">
        <munit:behavior>
            <sftp:create-directory config-ref="config" directoryPath="source/created-to-rename"/>
            <sftp:create-directory config-ref="config" directoryPath="source/file-renamed"/>
            <sftp:write  config-ref="config" path="source/created-to-rename/file.txt">
                <sftp:content ><![CDATA[#['Document for test rename']]]></sftp:content>
            </sftp:write>
        </munit:behavior>
        <munit:execution>
            <sftp:list config-ref="config" directoryPath="source/file-renamed" />
            <set-variable value="#[sizeOf(payload)]" variableName="size-directory-before-rename"/>
            <sftp:rename config-ref="config" path="source/created-to-rename" to="file-renamed" overwrite="true"/>
        </munit:execution>
        <munit:validation>
            <sftp:list config-ref="config" directoryPath="source/file-renamed" />
            <munit-tools:assert-that expression='#[vars."size-directory-before-rename"]' is="#[MunitTools::lessThan(sizeOf(payload))]" />
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-rename-directory-non-exists" description="Trying to rename a non-existent directory" expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <sftp:create-directory config-ref="config" directoryPath="source"/>
        </munit:behavior>
        <munit:execution>
            <sftp:rename config-ref="config" path="source/directory-non-exists" to="directory-renamed"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-rename-directory-with-special-characters"
                description="A directory is renamed by assigning a name that contains special characters.">
        <munit:behavior>
            <sftp:create-directory config-ref="config" directoryPath="source/directory-to-rename"/>
        </munit:behavior>
        <munit:execution>
            <sftp:rename config-ref="config" path="source/directory-to-rename" to="directory-renamed-@#!%!@="/>
        </munit:execution>
        <munit:validation >
            <sftp:list config-ref="config" directoryPath="source"/>
            <munit-tools:assert-that expression="#[sizeOf(payload)]" is="#[MunitTools::greaterThan(0)]"/>
            <munit-tools:assert-that expression="#[payload[0].attributes.fileName]" is="#[MunitTools::equalTo('directory-renamed-@#!%!@=')]"/>
        </munit:validation>
    </munit:test>
</mule>