<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
      xmlns:java="http://www.mulesoft.org/schema/mule/java"
      xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
        http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

    <munit:config name="sftp-read-test-case.xml"/>

    <munit:dynamic-port propertyName="sftp.server.port"/>

    <sftp:config name="config-with-limited-pool">
        <sftp:connection username="muletest1" password="muletest1" host="localhost" port="${sftp.server.port}"
                         workingDir="/" prngAlgorithm="SHA1PRNG">
            <pooling-profile exhaustedAction="WHEN_EXHAUSTED_WAIT" maxActive="1" maxIdle="1" maxWait="5000"/>
        </sftp:connection>
    </sftp:config>

    <munit:before-suite name="startSftpTestServer">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="startSftpServer(String)">
            <java:args>
                #[{
                arg0: ${sftp.server.port},
                }]
            </java:args>
        </java:invoke-static>
        <sftp:create-directory config-ref="config" directoryPath="source"/>
    </munit:before-suite>

    <munit:after-suite name="clearSftpTestServer">
        <sftp:delete config-ref="config" path="source"/>
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="stopSftpServer()">
            <java:args>
                #[{}]
            </java:args>
        </java:invoke-static>
    </munit:after-suite>

    <munit:test name="sftp-read-file-using-single-connection"
                description="Perform a read operation with a pooling profile which allows only 1 active connection">
        <munit:behavior>
            <set-variable variableName="fileName" value="source/filePath.txt"/>
            <set-variable variableName="fileContent" value="I just want to impress Mr. Stark"/>
            <sftp:write config-ref="config-with-limited-pool" path="#[vars.fileName]">
                <sftp:content>#[vars.fileContent]</sftp:content>
            </sftp:write>
        </munit:behavior>
        <munit:execution>
            <sftp:read config-ref="config-with-limited-pool" path='#[vars.fileName]'/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                    payload must equalTo(vars.fileContent)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-read-non-exists-file" description="Attempting to read a non-existent file."
                expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <set-variable variableName="fileName" value="source/filePath.txt"/>
            <set-variable variableName="fileContent" value="I just want to impress Mr. Stark"/>
            <sftp:write config-ref="config-with-limited-pool" path="#[vars.fileName]">
                <sftp:content>#[vars.fileContent]</sftp:content>
            </sftp:write>
        </munit:behavior>
        <munit:execution>
            <sftp:read config-ref="config" path="non-exists-file.txt"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-read-file-with-mimeType" description="A file is read and assigned an outputMimeType">
        <munit:behavior>
            <sftp:write config-ref="config" path="source/jsonDocument.json">
                <sftp:content><![CDATA[{
  "name": "Document Json",
  "purpose": ReadTests
}]]></sftp:content>
            </sftp:write>
            <sftp:write config-ref="config" path="source/xmlDocument.xml">
                <sftp:content><![CDATA[<root>
  <name>Document Json</name>
  <purpose>ReadTests</purpose>
</root>]]></sftp:content>
            </sftp:write>
        </munit:behavior>
        <munit:validation>
            <sftp:read config-ref="config" path="source/jsonDocument.json" outputMimeType="application/json"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::withMediaType('application/json')]"/>
            <sftp:read config-ref="config" path="source/xmlDocument.xml" outputMimeType="application/xml"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::withMediaType('application/xml')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-read-on-locked-file"
                description="Perform a read operation with lock when the connector is writing with a big content"
                ignore="#[Munit::muleVersionPriorTo('4.2.0')]" expectedErrorType="SFTP:FILE_LOCK">
        <munit:behavior>
            <set-variable variableName="fileName" value="filePath.txt"/>
            <set-variable variableName="loopSize" value="2500000"/>
            <set-variable variableName="singleLineSize" value="30"/>
            <set-variable variableName="overheadSize" value="2"/>
            <set-variable variableName="line" value="#[%dw 2.0 output application/json --- {'big' : 'payload'}]"/>
            <set-variable variableName="fileSize" value="#[vars.loopSize * vars.singleLineSize + vars.overheadSize]"/>
        </munit:behavior>
        <munit:execution>
            <async>
                <sftp:write config-ref="config" path='#[vars.fileName]' lock="#[true]">
                    <sftp:content>
                        #[
                        %dw 2.0
                        output application/json
                        ---
                        1 to vars.loopSize map vars.line
                        ]
                    </sftp:content>
                </sftp:write>
                <logger level="ERROR" message="#[payload]"/>
            </async>
            <set-variable variableName="filenamePattern" value="*.txt"/>
            <flow-ref name="assert-existing-file-flow"/>
            <sftp:read config-ref="config" path='#[vars.fileName]' lock="#[true]"/>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[
                    #[import * from dw::test::Asserts
                        ---
                        payload must notBeNull()]
                ]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-read-while-writing-file"
                description="Perform a read operation with lock when the connector is writing with a big content"
                ignore="#[Munit::muleVersionPriorTo('4.2.0')]">
        <munit:behavior>
            <set-variable variableName="fileName" value="filePath.txt"/>
            <set-variable variableName="loopSize" value="2500000"/>
            <set-variable variableName="singleLineSize" value="30"/>
            <set-variable variableName="overheadSize" value="2"/>
            <set-variable variableName="line" value="#[%dw 2.0 output application/json --- {'big' : 'payload'}]"/>
            <set-variable variableName="fileSize" value="#[vars.loopSize * vars.singleLineSize + vars.overheadSize]"/>
        </munit:behavior>
        <munit:execution>
            <async>
                <sftp:write config-ref="config" path='#[vars.fileName]'>
                    <sftp:content>
                        #[
                        %dw 2.0
                        output application/json
                        ---
                        1 to vars.loopSize map vars.line
                        ]
                    </sftp:content>
                </sftp:write>
                <logger level="ERROR" message="#[payload]"/>
            </async>
            <set-variable variableName="filenamePattern" value="*.txt"/>
            <flow-ref name="assert-existing-file-flow"/>
            <sftp:read config-ref="config" path='#[vars.fileName]'/>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[
                    #[import * from dw::test::Asserts
                        ---
                        attributes.size must [beGreaterThan(0), beLowerThan(vars.fileSize)]]
                ]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:execution>
    </munit:test>
    <flow name="assert-existing-file-flow">
        <until-successful maxRetries="50" millisBetweenRetries="1000">
            <sftp:list config-ref="config" directoryPath="/">
                <sftp:matcher
                        filenamePattern='#[vars.filenamePattern]'
                        caseSensitive="false"/>
            </sftp:list>
            <munit-tools:assert-that expression="#[payload[0].payload]" is="#[MunitTools::containsString(vars.fileName)]"/>
        </until-successful>
    </flow>
</mule>