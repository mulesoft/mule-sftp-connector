<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
      xmlns:java="http://www.mulesoft.org/schema/mule/java"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
        http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

    <munit:config name="sftp-write-test-case.xml">
        <munit:parameterizations>
            <munit:parameterization name="config">
                <munit:parameters>
                    <munit:parameter propertyName="config" value="config"/>
                </munit:parameters>
            </munit:parameterization>
            <munit:parameterization name="config-without-working-dir">
                <munit:parameters>
                    <munit:parameter propertyName="config" value="config-without-working-dir"/>
                </munit:parameters>
            </munit:parameterization>
        </munit:parameterizations>
    </munit:config>

    <munit:dynamic-port propertyName="sftp.server.port"/>

    <munit:before-suite name="startSftpTestServerForWriting">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="startSftpServer(String)">
            <java:args>
                #[{
                arg0: ${sftp.server.port},
                }]
            </java:args>
        </java:invoke-static>
    </munit:before-suite>

    <munit:after-suite name="clearSftpTestServerForWriting">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="stopSftpServer()">
            <java:args>
                #[{}]
            </java:args>
        </java:invoke-static>
    </munit:after-suite>

    <munit:test name="sftp-write-big-file"
                description="Perform a write operation with a big content" ignore="#[Munit::muleVersionPriorTo('4.2.0')]">
        <munit:behavior>
            <set-variable variableName="fileName" value="filePath.txt"/>
            <set-variable variableName="loopSize" value="500000"/>
            <set-variable variableName="singleLineSize" value="30"/>
            <set-variable variableName="overheadSize" value="2"/>
            <set-variable variableName="line" value="#[%dw 2.0 output application/json --- {'big' : 'payload'}]"/>
            <set-variable variableName="fileSize" value="#[vars.loopSize * vars.singleLineSize + vars.overheadSize]"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="${config}" path='#[vars.fileName]'>
                <sftp:content>
                    #[%dw 2.0
                    output application/json
                    ---
                    1 to vars.loopSize map vars.line]
                </sftp:content>
            </sftp:write>
        </munit:execution>
        <munit:validation>
            <sftp:read config-ref="${config}" path='#[vars.fileName]'/>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                     attributes.size must equalTo(vars.fileSize)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-write-on-invalid-working-directory" expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <set-variable variableName="fileName" value="filePath.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="config-invalid-folder" path='#[vars.fileName]' createParentDirectories="false">
                <sftp:content>test content</sftp:content>
            </sftp:write>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-on-invalid-path-directory" expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <set-variable variableName="fileName" value="invalid/filePath.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="${config}" path='#[vars.fileName]' createParentDirectories="false">
                <sftp:content>test content</sftp:content>
            </sftp:write>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-on-invalid-absolute-path" expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <set-variable variableName="fileName" value="/invalid/filePath.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="config-invalid-folder" path='#[vars.fileName]' createParentDirectories="false">
                <sftp:content>test content</sftp:content>
            </sftp:write>
        </munit:execution>
    </munit:test>

    <flow name="write-number-collection-until-successful">
        <choice>
            <when expression="#[payload == 0]">
                <set-variable variableName="writeMode" value="CREATE_NEW" />
            </when>
            <otherwise>
                <set-variable variableName="writeMode" value="APPEND" />
            </otherwise>
        </choice>
        <set-payload value="#[payload as String]"/>
        <until-successful maxRetries="10" millisBetweenRetries="1000">
            <sftp:write config-ref="${config}" path="filePath.txt" lock="true" mode="#[vars.writeMode]">
                <sftp:content>#[payload]</sftp:content>
            </sftp:write>
        </until-successful>
    </flow>

    <munit:test name="consecutive-writes-from-separate-flows-succeed-with-until-successful">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="write-number-collection-until-successful"/>
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="fileName" value="filePath.txt"/>
            <set-variable variableName="fileSize" value="#[6]"/>
            <set-variable variableName="expectedFileSize" value="#[vars.fileSize + 1]"/>
        </munit:behavior>
        <munit:execution>
            <foreach collection="#[1 to vars.fileSize]">
                <async>
                    <flow-ref name="write-number-collection-until-successful"/>
                </async>
            </foreach>
            <munit-tools:sleep time="2" timeUnit="SECONDS"/>
            <sftp:write config-ref="${config}" path="#[vars.fileName]" lock="true" mode="APPEND">
                <sftp:content>7</sftp:content>
            </sftp:write>
        </munit:execution>
        <munit:validation>
            <sftp:read config-ref="${config}" path='#[vars.fileName]'/>
            <logger level="INFO" message="#[payload]" />
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                     attributes.size must equalTo(vars.expectedFileSize)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>
  
    <munit:test name="sftp-write-file-permission-denied-directory"
                description="Trying write a file to a write protected folder should throw SFTP:ACCESS_DENIED."
                expectedErrorType="SFTP:ACCESS_DENIED">
        <munit:execution>
            <sftp:read config-ref="config-docker-server" path="/init"/>
            <sftp:write config-ref="config-docker-server" path="/root/init"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-file-permission-denied"
                description="Trying write content to a write protected file should throw SFTP:ACCESS_DENIED."
                expectedErrorType="SFTP:ACCESS_DENIED">
        <munit:execution>
            <sftp:write config-ref="config-docker-server" path="/init">
                <sftp:content>Some content</sftp:content>
            </sftp:write>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-deleted-file" description="Use the list operation to get the file content and try to write it but it was deleted before and should expect exception"
                expectedErrorType="SFTP:FILE_DOESNT_EXIST">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="delete-created-files"/>
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="fileName" value="/will-be-deleted.txt"/>
            <sftp:write config-ref="${config}" path='#[vars.fileName]' >
                <sftp:content>test content</sftp:content>
            </sftp:write>
        </munit:behavior>
        <munit:execution>
            <sftp:list config-ref="${config}" directoryPath="/">
            </sftp:list>
            <flow-ref name="wait-2-seconds"/>
            <foreach collection="#[payload]">
                <sftp:write config-ref="${config}" path="/copy-of-will-be-deleted.txt" createParentDirectories="false" >
                </sftp:write>
            </foreach>
        </munit:execution>
    </munit:test>



    <flow name="delete-created-files">
        <sftp:listener config-ref="${config}" directory="/">
            <scheduling-strategy>
                <fixed-frequency startDelay="2000"/>
            </scheduling-strategy>
        </sftp:listener>
        <sftp:delete config-ref="${config}" path="#[attributes.path]" />
    </flow>

</mule>
