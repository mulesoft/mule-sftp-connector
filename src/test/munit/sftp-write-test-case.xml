<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
      xmlns:java="http://www.mulesoft.org/schema/mule/java"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd

		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
        http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

    <munit:config name="sftp-write-test-case.xml">
        <munit:parameterizations>
            <munit:parameterization name="config-docker-with-home-directory">
                <munit:parameters>
                    <munit:parameter propertyName="config" value="config-docker-with-home-directory"/>
                </munit:parameters>
            </munit:parameterization>
            <munit:parameterization name="config-docker-without-home-directory">
                <munit:parameters>
                    <munit:parameter propertyName="config" value="config-docker-without-home-directory"/>
                </munit:parameters>
            </munit:parameterization>
        </munit:parameterizations>
    </munit:config>



    <munit:before-suite name="startSftpTestServerForWriting">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="startSftpServer(String)">
            <java:args>
                #[{
                arg0: ${sftp.server.port},
                }]
            </java:args>
        </java:invoke-static>
    </munit:before-suite>

    <munit:after-suite name="clearSftpTestServerForWriting">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="stopSftpServer()">
            <java:args>
                #[{}]
            </java:args>
        </java:invoke-static>
    </munit:after-suite>

    <munit:before-test name="create-new-file-to-append">
        <flow-ref name="write-file-append"/>
    </munit:before-test>

    <munit:test name="sftp-write">
        <munit:behavior>
            <set-variable variableName="fileName" value="write-file.txt"/>
            <set-variable variableName="mode" value="OVERWRITE"/>
            <set-variable variableName="createParent" value="true"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="${config}" path="#[vars.fileName]" mode="#[vars.mode]" createParentDirectories="#[vars.createParent]" />
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-void-file">
        <munit:behavior>
            <set-variable variableName="fileName" value="write-void.txt"/>
            <set-variable variableName="mode" value="OVERWRITE"/>
            <set-variable variableName="createParent" value="true"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="${config}" path="#[vars.fileName]" mode="#[vars.mode]" createParentDirectories="#[vars.createParent]" />
        </munit:execution>
        <munit:validation >
            <sftp:read config-ref="${config}" path="#[vars.fileName]" />
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::isEmptyString()]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-write-file-exists-with-createNewMode" description="It tries to create a new file when one with the same name already exists."
                expectedErrorType="SFTP:FILE_ALREADY_EXISTS">
        <munit:behavior >
            <set-variable variableName="fileName" value="createNewFail.txt"/>
            <set-variable variableName="mode" value="CREATE_NEW"/>
            <sftp:write config-ref="${config}" path="#[vars.fileName]">
            </sftp:write>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="${config}" path="#[vars.fileName]" mode="#[vars.mode]">
            </sftp:write>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-with-createNewMode" description="Will create a new file with the CreateNew setting.">
        <munit:behavior >
            <set-variable variableName="fileName" value="newFileToTest.txt"/>
            <set-variable variableName="mode" value="CREATE_NEW"/>
            <try>
                <sftp:delete config-ref="${config}" path="#[vars.fileName]"/>
                <error-handler >
                    <on-error-continue enableNotifications="false" logException="false" type="SFTP:ILLEGAL_PATH"/>
                </error-handler>
            </try>
        </munit:behavior>
        <munit:execution>
            <set-payload value="Hello World!"/>
            <sftp:write config-ref="${config}" path="#[vars.fileName]" mode="#[vars.mode]">
            </sftp:write>
        </munit:execution>
        <munit:validation >
            <sftp:read config-ref="${config}" path="#[vars.fileName]" />
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('Hello World!')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-read-write">
        <munit:behavior>
            <set-variable variableName="fileName" value="write-file.txt"/>
            <set-variable variableName="mode" value="OVERWRITE"/>
            <set-variable variableName="createParent" value="true"/>
        </munit:behavior>
        <munit:execution>
            <sftp:read config-ref="${config}" path="#[vars.fileName]" />
            <set-payload value="Hello World!" />
            <sftp:write config-ref="${config}" path="#[vars.fileName]" mode="#[vars.mode]" createParentDirectories="#[vars.createParent]" />
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-lock">
        <munit:behavior>
            <set-variable variableName="fileName" value="write-file.txt"/>
            <set-variable variableName="mode" value="OVERWRITE"/>
            <set-variable variableName="createParent" value="true"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="${config}" path="#[vars.fileName]" lock="true" mode="#[vars.mode]" createParentDirectories="#[vars.createParent]" />
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-big-file"
                description="Perform a write operation with a big content" ignore="#[Munit::muleVersionPriorTo('4.3.0')]">
        <munit:behavior>
            <set-variable variableName="fileName" value="filePath.txt"/>
            <set-variable variableName="loopSize" value="500000"/>
            <set-variable variableName="singleLineSize" value="30"/>
            <set-variable variableName="overheadSize" value="2"/>
            <set-variable variableName="line" value="#[%dw 2.0 output application/json --- {'big' : 'payload'}]"/>
            <set-variable variableName="fileSize" value="#[vars.loopSize * vars.singleLineSize + vars.overheadSize]"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="${config}" path='#[vars.fileName]'>
                <sftp:content>
                    #[%dw 2.0
                    output application/json
                    ---
                    1 to vars.loopSize map vars.line]
                </sftp:content>
            </sftp:write>
        </munit:execution>
        <munit:validation>
            <sftp:read config-ref="${config}" path='#[vars.fileName]'/>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                     attributes.size must equalTo(vars.fileSize)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-write-on-invalid-working-directory" expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <set-variable variableName="fileName" value="filePath.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="config-invalid-folder" path='#[vars.fileName]' createParentDirectories="false">
                <sftp:content>test content</sftp:content>
            </sftp:write>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-on-invalid-path-directory" expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <set-variable variableName="fileName" value="invalid/filePath.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="${config}" path='#[vars.fileName]' createParentDirectories="false">
                <sftp:content>test content</sftp:content>
            </sftp:write>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-write-on-invalid-absolute-path" expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <set-variable variableName="fileName" value="/invalid/filePath.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:write config-ref="config-invalid-folder" path='#[vars.fileName]' createParentDirectories="false">
                <sftp:content>test content</sftp:content>
            </sftp:write>
        </munit:execution>
    </munit:test>

    <flow name="write-number-collection-until-successful">
        <logger level="INFO" message="#[payload]" />
        <set-payload value="#[payload as String]"/>
        <until-successful maxRetries="10" millisBetweenRetries="1000">
            <sftp:write config-ref="${config}" path="test/filePath.txt" lock="true" mode="APPEND">
                <sftp:content>#[payload]</sftp:content>
            </sftp:write>
        </until-successful>
    </flow>

    <flow name="write-file-append">
        <sftp:write config-ref="${config}" path="test/filePath.txt"/>
        <sftp:write config-ref="${config}" path="write-file.txt"/>
    </flow>


    <munit:test name="consecutive-writes-from-separate-flows-succeed-with-until-successful"  ignore="#[Munit::muleVersionPriorTo('4.1.5')]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="write-number-collection-until-successful"/>
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="fileName" value="test/filePath.txt"/>
            <set-variable variableName="fileSize" value="#[6]"/>
            <set-variable variableName="expectedFileSize" value="#[vars.fileSize + 1]"/>
        </munit:behavior>
        <munit:execution>
            <foreach collection="#[1 to vars.fileSize]">
                <async>
                    <flow-ref name="write-number-collection-until-successful"/>
                </async>
            </foreach>
            <until-successful maxRetries="10" millisBetweenRetries="1000">
                <sftp:write config-ref="${config}" path="#[vars.fileName]" lock="true" mode="APPEND">
                    <sftp:content>7</sftp:content>
                </sftp:write>
            </until-successful>
        </munit:execution>
        <munit:validation>
            <sftp:read config-ref="${config}" path='#[vars.fileName]'/>
            <logger level="INFO" message="#[payload]" />
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                     attributes.size must equalTo(vars.expectedFileSize)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>

    <munit:after-test  name="delete-file-append" description="A description">
        <sftp:delete config-ref="${config}" path="test/filePath.txt"/>
    </munit:after-test>

    <flow name="delete-created-files">
        <sftp:listener config-ref="${config}" directory="test">
            <scheduling-strategy>
                <fixed-frequency startDelay="2000"/>
            </scheduling-strategy>
        </sftp:listener>
        <sftp:delete config-ref="${config}" path="#[attributes.path]" />
    </flow>
</mule>
