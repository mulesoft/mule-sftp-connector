<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
      xmlns:java="http://www.mulesoft.org/schema/mule/java" xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
        http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

    <munit:config name="sftp-copy-test-case.xml"/>



    <munit:before-suite name="before-sftp-copy-test-cas">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="startSftpServer(String)">
            <java:args>
                #[{
                arg0: ${sftp.server.port},
                }]
            </java:args>
        </java:invoke-static>
    </munit:before-suite>

    <munit:after-suite name="after-sftp-copy-test-case">
        <java:invoke-static class="org.mule.extension.sftp.internal.lifecycle.SftpServerLifecycleManager"
                            method="stopSftpServer()">
            <java:args>
                #[{}]
            </java:args>
        </java:invoke-static>
    </munit:after-suite>

    <munit:test name="sftp-copy-directories" description="Perform a copy operation that copies a whole directory">
        <munit:behavior>
            <set-variable variableName="fileContent" value="I just want to impress Mr. Stark"/>

            <sftp:create-directory config-ref="config" directoryPath="copy-dir-test"/>
            <sftp:create-directory config-ref="config" directoryPath="copy-dir-test/folder-to-copy"/>

            <sftp:write config-ref="config" path="copy-dir-test/folder-to-copy/file1.txt">
                <sftp:content>#[vars.fileContent]</sftp:content>
            </sftp:write>
            <sftp:write config-ref="config" path="copy-dir-test/folder-to-copy/file2.txt">
                <sftp:content>#[vars.fileContent]</sftp:content>
            </sftp:write>
            <sftp:write config-ref="config" path="copy-dir-test/folder-to-copy/file3.txt">
                <sftp:content>#[vars.fileContent]</sftp:content>
            </sftp:write>
        </munit:behavior>
        <munit:execution>
            <sftp:copy config-ref="config" sourcePath="copy-dir-test/folder-to-copy/"
                      targetPath="copy-dir-test/folder-copied" overwrite="false"
                      createParentDirectories="true"/>
        </munit:execution>
        <munit:validation>
            <sftp:read config-ref="config" path="copy-dir-test/folder-copied/folder-to-copy/file1.txt"/>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                    payload must equalTo(vars.fileContent)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
            <sftp:read config-ref="config" path="copy-dir-test/folder-copied/folder-to-copy/file2.txt"/>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                    payload must equalTo(vars.fileContent)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
            <sftp:read config-ref="config" path="copy-dir-test/folder-copied/folder-to-copy/file3.txt"/>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                    payload must equalTo(vars.fileContent)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-copy-to-target-ending-in-separator" description="Perform copy operations of a file with a destination that ends in a separator">
        <munit:behavior>
            <set-variable variableName="fileContent" value="I just want to impress Mr. Stark"/>

            <sftp:create-directory config-ref="config" directoryPath="copy-test"/>
            <sftp:create-directory config-ref="config" directoryPath="copy-test/folder-input"/>

            <sftp:write config-ref="config" path="copy-test/folder-input/hello-world.txt">
                <sftp:content>#[vars.fileContent]</sftp:content>
            </sftp:write>
        </munit:behavior>
        <munit:execution>
            <sftp:copy config-ref="config" sourcePath="copy-test/folder-input/hello-world.txt"
                      targetPath="copy-test/folder-output/" overwrite="false"
                      createParentDirectories="true"/>
            <set-payload value="Copy with SFTP works fine!!"/>
        </munit:execution>
        <munit:validation>
            <sftp:read config-ref="config" path="copy-test/folder-output/hello-world.txt"/>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
                                     ---
                                    payload must equalTo(vars.fileContent)
                                    ]]]>
                </munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-copy-non-exists-directory" description="Perform a copy operation from a non-existent directory"
                expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:execution>
            <sftp:copy config-ref="config" sourcePath="copy-test/non-exist-directory" targetPath="target"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-copy-file-already-exists" description="Perform a copy operation on a file that already exists on the target"
                expectedErrorType="SFTP:FILE_ALREADY_EXISTS">
        <munit:behavior >
            <sftp:write config-ref="config" path="target/test.txt"/>
            <sftp:write config-ref="config" path="source/test.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:copy config-ref="config" sourcePath="source/test.txt" targetPath="target"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-copy-file-with-createParentDirectories-disable-to-non-exists-target"
                description="Perform a copy operation to a non-existent target with the create parent directory property disabled"
                expectedErrorType="SFTP:ILLEGAL_PATH">
        <munit:behavior>
            <set-payload value="Hello World!!"/>
            <sftp:write config-ref="config" path="source/copy-file-test.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:copy  config-ref="config" sourcePath="source/copy-file-test.txt" targetPath="target/non-exists-directory" createParentDirectories="false"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-copy-file-with-createParentDirectories-enable-to-non-exists-target"
                description="Perform a copy operation to a non-existent target with the create parent directory property enable">
        <munit:behavior>
            <set-payload value="Hello World!!"/>
            <sftp:write config-ref="config" path="source/copy-file-test.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:copy  config-ref="config" sourcePath="source/copy-file-test.txt" targetPath="target/will-be-created-directory" createParentDirectories="true"/>
        </munit:execution>
        <munit:validation >
            <sftp:read config-ref="config" path="target/will-be-created-directory/copy-file-test.txt"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('Hello World!!')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-copy-file-with-createParentDirectories-disable-to-exists-target"
                description="Perform a copy operation to a existent target with the create parent directory property disable">
        <munit:behavior>
            <set-payload value="Hello World!!"/>
            <sftp:write config-ref="config" path="source/copy-file-test.txt"/>
            <sftp:create-directory config-ref="config" directoryPath="target/created-to-copy"/>
        </munit:behavior>
        <munit:execution>
            <sftp:copy config-ref="config" sourcePath="source/copy-file-test.txt" targetPath="target/created-to-copy" createParentDirectories="false"/>
        </munit:execution>
        <munit:validation >
            <sftp:read config-ref="config" path="target/created-to-copy/copy-file-test.txt"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('Hello World!!')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-copy-file-exists-and-rename"
                description="Copy a file that has the same name as another on the target. This copy must be renamed.">
        <munit:behavior>
            <set-payload value="This file was copied and renamed"/>
            <sftp:write config-ref="config" path="source/file-for-copy-and-rename.txt"/>
            <set-payload value="Hello World!!"/>
            <sftp:write config-ref="config" path="target/file-for-copy-and-rename.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:copy config-ref="config" sourcePath="source/file-for-copy-and-rename.txt" targetPath="target" renameTo="rename-file.txt"/>
        </munit:execution>
        <munit:validation >
            <sftp:read config-ref="config" path="target/file-for-copy-and-rename.txt"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('Hello World!!')]" />
            <sftp:read config-ref="config" path="target/rename-file.txt"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('This file was copied and renamed')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="sftp-copy-file-exists-and-overwrite"
                description="Copy a file that has the same name as another on the target. This copy must be overwrite.">
        <munit:behavior>
            <set-payload value="This file was copied and overwrite"/>
            <sftp:write config-ref="config" path="source/file-for-copy-and-overwrite.txt"/>
            <set-payload value="Hello World!!"/>
            <sftp:write config-ref="config" path="target/file-for-copy-and-overwrite.txt"/>
        </munit:behavior>
        <munit:execution>
            <sftp:copy config-ref="config" sourcePath="source/file-for-copy-and-overwrite.txt" targetPath="target" overwrite="true"/>
        </munit:execution>
        <munit:validation >
            <sftp:read config-ref="config" path="target/file-for-copy-and-overwrite.txt"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('This file was copied and overwrite')]"/>
        </munit:validation>
    </munit:test>


</mule>