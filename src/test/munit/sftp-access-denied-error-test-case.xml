<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

    <munit:config name="sftp-access-denied-error-test-case.xml">
        <munit:parameterizations>
            <munit:parameterization name="config-docker-with-home-directory">
                <munit:parameters>
                    <munit:parameter propertyName="config" value="config-docker-with-home-directory"/>
                    <munit:parameter propertyName="path_file" value="/privateDirectory/newFile.txt"/>
                </munit:parameters>
            </munit:parameterization>
        </munit:parameterizations>
    </munit:config>

    <flow name="makeFileAsRootScript" doc:id="37cf6c23-b3ae-49ce-98d3-41d26fa5d7aa">
        <scripting:execute engine="jython">
            <scripting:code><![CDATA[import subprocess

# Get container ID of the "openssh" container
container_id_cmd = ["docker", "ps", "-qf", "name=openssh"]
container_id_output = subprocess.check_output(container_id_cmd).strip()
container_id = container_id_output.decode('utf-8')
print "Open SSH container"

# Create a directory inside the container
mkdir_cmd = ["docker", "exec", container_id, "mkdir", "/config/privateDirectory"]
mkdir = subprocess.call(mkdir_cmd)
print "Created directory"

# Create a file with content inside the created directory
file_path = "/config/privateDirectory/file-to-be-renamed.txt"
file_content = "This is the content of the file."
create_file_cmd = ["docker", "exec", container_id, "bash", "-c", "echo '{}' > {}".format(file_content, file_path)]
create_file = subprocess.call(create_file_cmd)
print "Created file with content"

# Change ownership of the directory to root
chown_cmd = ["docker", "exec", container_id, "sudo", "chown", "-R", "root:root", "/config/privateDirectory"]
chown = subprocess.call(chown_cmd)
print "Changed ownership of directory to root"
]]></scripting:code>
        </scripting:execute>
    </flow>
    <flow name="revertChangesScript" doc:id="37cf6c23-b3ae-49ce-98d3-41d26fa5d7aa">
        <scripting:execute engine="jython">
            <scripting:code><![CDATA[import subprocess

# Get container ID of the "openssh" container
container_id_cmd = ["docker", "ps", "-qf", "name=openssh"]
container_id_output = subprocess.check_output(container_id_cmd).strip()
container_id = container_id_output.decode('utf-8')
print "Open SSH container =", container_id

# Revert the changes
rm_file_cmd = ["docker", "exec", container_id, "rm", "/config/privateDirectory/file-to-be-renamed.txt"]
rm_dir_cmd = ["docker", "exec", container_id, "rmdir", "/config/privateDirectory"]
rm_file = subprocess.call(rm_file_cmd)
rm_dir = subprocess.call(rm_dir_cmd)
print "Reverted changes. Removed file, Removed directory"
]]></scripting:code>
        </scripting:execute>
    </flow>

    <munit:before-suite name="start-script">
        <flow-ref name="makeFileAsRootScript"/>
    </munit:before-suite>

    <munit:after-suite name="finish-script">
        <flow-ref name="revertChangesScript"/>
    </munit:after-suite>

    <munit:test name="sftp-write-on-private-directory" expectedErrorType="SFTP:ACCESS_DENIED">
        <munit:execution>
            <sftp:write config-ref="${config}" path="${path_file}" createParentDirectories="true">
                <sftp:content>test content</sftp:content>
            </sftp:write>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-copy-into-private-directory" expectedErrorType="SFTP:ACCESS_DENIED">
        <munit:behavior>
            <sftp:write config-ref="${config}" path="test/copy-file-to-private-folder"/>
        </munit:behavior>
        <munit:execution>
            <sftp:copy config-ref="${config}" sourcePath="test/copy-file-to-private-folder" targetPath="${path_file}"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-create-to-private-directory" expectedErrorType="SFTP:ACCESS_DENIED">
        <munit:execution>
            <sftp:create-directory config-ref="${config}" directoryPath="/privateDirectory/otherDirectory"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-rename-private-file" expectedErrorType="SFTP:ACCESS_DENIED">
        <munit:execution>
            <sftp:rename config-ref="${config}" path="privateDirectory/file-to-be-renamed.txt" to="file-renamed.txt"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-list-and-rename-private-file" expectedErrorType="SFTP:ACCESS_DENIED">
        <munit:execution>
            <sftp:list-and-get config-ref="${config}" directoryPath="./privateDirectory"/>
            <logger level="INFO" message="list and get output = #[payload]"/>
            <sftp:rename config-ref="${config}" path="privateDirectory/file-to-be-renamed.txt" to="file-renamed.txt"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-read-private-file">
        <munit:execution>
            <sftp:read config-ref="${config}" path="privateDirectory/file-to-be-renamed.txt"/>
        </munit:execution>
    </munit:test>

    <munit:test name="sftp-delete-private-file" expectedErrorType="SFTP:ACCESS_DENIED">
        <munit:execution>
            <sftp:delete config-ref="${config}" path="privateDirectory/file-to-be-renamed.txt"/>
        </munit:execution>
    </munit:test>

</mule>
